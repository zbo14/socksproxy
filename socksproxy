#!/bin/bash -e

DIR=$(dirname "$(readlink $0)")
cd $DIR

case $1 in
  add-host)
    if [[ -z $HOST || -z $PORT || -z $PUBKEY ]]
    then
      echo "Usage: HOST= PORT= PUBKEY= socksproxy <add-host>"
      exit
    fi

    echo "[$HOST]:$PORT $PUBKEY" >> .ssh/known_hosts
    ;;

  build)
    docker build --no-cache -t socksproxy .
    ;;

  get-hosts)
    cat .ssh/known_hosts
    ;;

  get-key)
    cat .ssh/id_ed25519.pub
    ;;

  init)
    mkdir -p .ssh
    touch .ssh/known_hosts
    ssh-keygen -t ed25519 -f .ssh/id_ed25519 -N ''
    docker network create socksproxy
    ;;

  rm-host)
    if [[ -z $HOST || -z $PORT ]]
    then
      echo "Usage: HOST= PORT= socksproxy <rm-host>"
      exit
    fi

    grep -v "[$HOST]:$PORT" .ssh/known_hosts > other_hosts
    mv other_hosts .ssh/known_hosts
    ;;

  start)
    if [[ -z $HOST || -z $LOCAL_PORT || -z $REMOTE_PORT ]]
    then
      echo "Usage: HOST= LOCAL_PORT= REMOTE_PORT= socksproxy <start>"
      exit
    fi

    docker run \
      -d \
      -e HOST=$HOST \
      -e LOCAL_PORT=$LOCAL_PORT \
      -e REMOTE_PORT=$REMOTE_PORT \
      --init \
      --name socksproxy \
      --network="socksproxy" \
      --network-alias="socksproxy" \
      -p $LOCAL_PORT:$LOCAL_PORT \
      --restart=always \
      -v $DIR/.ssh:/home/socksproxy/.ssh:ro \
      socksproxy
    ;;

  stop)
    docker rm -fv socksproxy
    ;;

  *)
    echo $'Usage: [ARG1= ARG2= ...] socksproxy <command>

Commands:
  add-host    Add a host to the known_hosts file
  build       Build the Docker image
  get-hosts   Print the contents of the known_hosts file
  get-key     Print the proxy\'s public key
  init        Create Docker network and directory with SSH keys and known_hosts file
  rm-host     Remove a host from the known_hosts file
  start       Start a Docker container that connects to a host and runs the SOCKS proxy
  stop        Remove the Docker container and its volume'
    ;;
esac
